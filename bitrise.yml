format_version: '23'
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git
project_type: flutter
workflows:
  deploy:
    description: |
      Builds and deploys app using [Deploy to bitrise.io Step](https://devcenter.bitrise.io/en/getting-started/getting-started-with-flutter-apps.html#deploying-a-flutter-app).

      If you build for iOS, make sure to set up code signing secrets on Bitrise for a successful build.

      Next steps:
      - Check out [Getting started with Flutter apps](https://devcenter.bitrise.io/en/getting-started/getting-started-with-flutter-apps.html) for signing and deployment options.
      - Check out the [Code signing guide](https://devcenter.bitrise.io/en/code-signing.html) for iOS and Android
    steps:
    - activate-ssh-key@4: {}
    - git-clone@8: {}
    - certificate-and-profile-installer@1: {}
    - flutter-installer@0:
        inputs:
        - version: 3.35.1
        - is_update: 'false'
    - flutter-analyze@0:
        inputs:
        - project_location: "$BITRISE_FLUTTER_PROJECT_LOCATION"
    - flutter-test@1:
        inputs:
        - project_location: "$BITRISE_FLUTTER_PROJECT_LOCATION"
    - flutter-build@0:
        inputs:
        - project_location: "$BITRISE_FLUTTER_PROJECT_LOCATION"
        - platform: both
        - ios_output_type: archive
    - deploy-to-bitrise-io@2: {}
  primary:
    description: |
      Builds project and runs tests.

      Next steps:
      - Check out [Getting started with Flutter apps](https://devcenter.bitrise.io/en/getting-started/getting-started-with-flutter-apps.html).
    steps:
    - activate-ssh-key@4: {}
    - git-clone@8: {}
    - flutter-installer@0:
        inputs:
        - version: 3.35.1
        - is_update: 'false'
    - restore-dart-cache@1: {}
    - flutter-test@1:
        inputs:
        - project_location: "$BITRISE_FLUTTER_PROJECT_LOCATION"
    - flutter-build@0:
        inputs:
        - project_location: "$BITRISE_FLUTTER_PROJECT_LOCATION"
        - platform: ios
        - ios_output_type: archive
        - ios_additional_params: "--release --no-codesign"
        - ios_output_pattern: "*build/ios/archive/*.xcarchive"
    - script@1:
        title: "Convert to IPA"
        inputs:
        - script_content: |
            #!/bin/bash
            set -ex
            
            # Find the xcarchive file
            XCARCHIVE_PATH=$(find build/ios/archive -name "*.xcarchive" | head -1)
            
            if [ -z "$XCARCHIVE_PATH" ]; then
              echo "No xcarchive file found"
              exit 1
            fi
            
            echo "Found xcarchive: $XCARCHIVE_PATH"
            
            # Export to IPA
            xcodebuild -exportArchive \
              -archivePath "$XCARCHIVE_PATH" \
              -exportPath build/ios/ipa \
              -exportOptionsPlist ios/ExportOptions.plist
            
            # List generated files
            ls -la build/ios/ipa/
            
            # Copy IPA to artifacts directory
            cp build/ios/ipa/*.ipa $BITRISE_DEPLOY_DIR/
    - save-dart-cache@1: {}
    - deploy-to-bitrise-io@2: {}
    triggers:
      push:
      - branch: main
      pull_request:
      - source_branch: "*"
  nuevo:
    description: |
      Builds project and runs tests.

      Next steps:
      - Check out [Getting started with Flutter apps](https://devcenter.bitrise.io/en/getting-started/getting-started-with-flutter-apps.html).
    steps:
    - activate-ssh-key@4: {}
    - git-clone@8: {}
    - flutter-installer@0:
        inputs:
        - version: 3.35.1
        - is_update: 'false'
    - restore-dart-cache@1: {}
    - flutter-test@1:
        inputs:
        - project_location: "$BITRISE_FLUTTER_PROJECT_LOCATION"
    - save-dart-cache@1: {}
    - deploy-to-bitrise-io@2: {}
    triggers:
      push:
      - branch: main
      pull_request:
      - source_branch: "*"
meta:
  bitrise.io:
    stack: osx-xcode-16.4.x
    machine_type_id: g2.mac.large
app:
  envs:
  - BITRISE_FLUTTER_PROJECT_LOCATION: "frontend"
    opts:
      is_expand: false
